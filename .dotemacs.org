

* Defaults
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox')

;;Extra paths
(add-to-list 'exec-path "/usr/local/bin")

#+END_SRC

* Window Modifications

#+BEGIN_SRC emacs-lisp

(menu-bar-mode -1)
(tool-bar-mode -1)
(setq inhibit-splash-screen t)
(display-time)
;; Enable transient mark mode
(transient-mark-mode 1)
#+END_SRC

* Additional packages loading
#+BEGIN_SRC emacs-lisp
;;additional Load paths
(add-to-list 'load-path "~/.emacs.d/lisp/")
(pdf-tools-install)
#+END_SRC
* Major Mode Mods
** TRAMP
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
(setq projectile-mode-line "Projectile")
#+END_SRC

** Org Mode
 #+BEGIN_SRC emacs-lisp

 ;;;;Org mode configuration
 ;; Enable Org mode
 (require 'org)

 ;; Make Org mode work with files ending in .org
 (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

 ;; The above is the default in recent emacsen
 (setq org-todo-keywords 
   '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

 #+END_SRC
*** Agendas
 #+BEGIN_SRC emacs-lisp
 (setq org-agenda-files (list "~/Documents/Org/Agendas/school.org"
                              "~/Documents/Org/Agendas/home.org"))
 #+END_SRC
*** Babel Added Languages
 #+BEGIN_SRC emacs-lisp
 ;;Org mode additional Languages
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((prolog . t)))
 #+END_SRC
*** Org Keybinds
 #+BEGIN_SRC emacs-lisp
 ;;----Org mode keybinds-----
 ;; Standard key bindings
 (global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cb" 'org-iswitchb)


 #+END_SRC

** Prolog Mode
#+begin_src emacs-lisp
(autoload 'run-prolog "prolog" "Start a prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing a Mercury programs." t)
(setq proloh-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                      ("\\.m$" . mercury-mode))
		      auto-mode-alist))
(require 'ediprolog)
(global-set-key [f12] 'ediprolog-dwim)
		      

#+end_src
** Swift Mode
#+begin_src emacs-lisp
(use-package swift-playground-mode :ensure t :defer t :init
  (autoload 'swift-playground-global-mode "swift-playground-mode" nil t)
  (add-hook 'swift-mode-hook #'swift-playground-global-mode))
#+end_src
** C++ mode
#+begin_src emacs-lisp
(setq c-basic-offset 4)
#+end_src
* Minor Mode Mods
** engine-mode
Bound to key *C-x /* to start while highlighting a selection
#+begin_src emacs-lisp
(require 'engine-mode)
(engine-mode t)
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "g")
(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")
#+end_src
* Packages
** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)

  ;; When you have an active region that spans multiple lines, the following will
  ;; add a cursor to each line:
  
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
      
  ;; When you want to add multiple cursors not based on continuous lines, but based on
  ;; keywords in the buffer, use:

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

#+END_SRC

** mpv
#+begin_src emacs-lisp
(org-add-link-type "mpv" #'mpv-play)
(defun org-mpv-complete-link (&optional arg)
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-file-complete-link arg)
   t t))
(add-hook 'org-open-at-point-functions #'mpv-seek-to-position-at-point)
#+end_src
** emms
#+begin_src emacs-lisp
(require 'emms-setup)
(emms-all)
(emms-default-players)
(setq emms-source-file-default-directory "~/Music/")
(require 'emms-player-simple)
(require 'emms-source-file)
(require 'emms-source-playlist)
(setq emms-player-list '(mpv-play
                         emms-player-mpg321
                         emms-player-ogg123
                         emms-player-mplayer))
#+end_src
